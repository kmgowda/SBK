/**
 * Copyright (c) KMG. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 */

import org.gradle.internal.jvm.Jvm

buildscript {
	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "gradle.plugin.com.palantir.graal:gradle-graal:0.7.2"
	}
	println "Build JVM Version is : " + Jvm.current()

}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'

def SbkMainClass = "io.sbk.main.SbkMain"

allprojects {
	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}

	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'application'
	apply plugin: "com.palantir.graal"

	dependencies {
		compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
		testCompile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
	}

	apply from: "$rootDir/gradle/checkstyle.gradle"
	apply from: "$rootDir/gradle/eclipse.gradle"
	apply from: "$rootDir/gradle/spotbugs.gradle"
	apply from: "$rootDir/gradle/idea.gradle"
	apply from: "$rootDir/gradle/jacoco.gradle"
	apply from: "$rootDir/gradle/java.gradle"
	apply from: "$rootDir/gradle/protobuf.gradle"

	mainClassName = SbkMainClass

	def sbkProjectName = rootProject.name + project.path.replace(":", "-")
	sbkProjectName = sbkProjectName.replace(rootProject.name + "-" + rootProject.name + "-" , rootProject.name+"-")
	sbkProjectName = sbkProjectName.replace(rootProject.name + "-driver-", rootProject.name + "-")
	sbkProjectName = sbkProjectName.replace("--", "-")
	if (sbkProjectName == rootProject.name + "-") {
		sbkProjectName = rootProject.name
	}
	archivesBaseName = sbkProjectName
	version = sbkVersion
	applicationName = archivesBaseName
	def sbkClass = rootProject.name
	if (project.path.startsWith(":driver-")) {
		sbkClass = project.path.replace(":driver-","")
	}
	jar {
		manifest {
			attributes	'Implementation-Title': archivesBaseName,
					'Implementation-Version': sbkVersion
		}
	}

	distributions {
		main {
			distributionBaseName.set(archivesBaseName)
		}
	}

	application {
		applicationDefaultJvmArgs = ['-Dsbk.applicationName='+applicationName, "-Dsbk.className="+sbkClass]
	}
/*
 * Use the build startup script which is available in gradle/application.gradle
	startScripts {
		doLast {
			unixScript.text = unixScript.text.replace('SERVER_APP_HOME', '\$APP_HOME')
			windowsScript.text = windowsScript.text.replace('SERVER_APP_HOME', '%~dp0..')
		}
	}

 */

	task generateDashboards(type: Copy) {
		if (project.path.startsWith(":driver-")) {
			def outDir = 'build/dashboard'
			def outFile = sbkProjectName+"-"+sbkVersion+".json"
			def sbkClassUpperCase = sbkClass.toUpperCase()

			/*
			call with parameter
			./gradlew generateDashboards -Poutdir="/Users/kmg/projects/SBK/grafana/dashboards"
			to generate dashboard files on single folder
			 */
			if (project.hasProperty("outdir")) {
				outDir = outdir
				outFile = sbkProjectName+".json"
			}


			from "$rootDir/dashboard-template.json"
			into outDir
			filter { line -> line.replaceAll('SBK@2020', sbkClassUpperCase) }
			rename 'dashboard-template.json', outFile

			doLast {
				println "generatering file : " + outDir + "/" + outFile
			}
		}
	}

	task generateDockerfiles() {
		def baseDriverToSkip="sbk-api"
		def buffer = ""
		def outDir = 'build/dockers'
		def outFile = sbkProjectName+"-"+sbkVersion

		/*
       	 	call with parameter
        	./gradlew generateDockerfiles -Poutdir="/Users/kmg/projects/SBK/dockers"
        	to generate dashboard files on single folder
        */
		if (project.hasProperty("outdir")) {
			outDir = outdir
			outFile = sbkProjectName
		}


		if (project.path.startsWith(":driver-")) {
			doLast {
				println "generatering file : " + outDir + "/" + outFile

				configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def id = artifact.moduleVersion.id
					if (id.group.toString() == rootProject.name) {
						if (id.name != baseDriverToSkip) {
							buffer += "COPY --chown=root:root " +id.name +" \${APP_HOME}/" + id.name + "\n"
						}
					}
				}
				buffer += "COPY --chown=root:root " +project.name +" \${APP_HOME}/" + project.name + "\n"
				copy {
					from "$rootDir/driver-docker-template"
					into outDir
					filter { line -> line.replaceAll('PROJECT@SBK', project.name) }
					filter { line -> line.replaceAll('APP@SBK', sbkProjectName) }
					filter { line -> line.replace("COPY@SBK", buffer) }
					rename 'driver-docker-template', outFile
				}
			}
		} else if (project.name == rootProject.name) {
			doLast {
				println "generatering file : " + outDir + "/" + outFile

				configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def id = artifact.moduleVersion.id
					if (id.group.toString() == rootProject.name) {
						if (id.name != baseDriverToSkip) {
							buffer += "COPY --chown=root:root " +id.name +" \${APP_HOME}/" + id.name + "\n"
						}
					}
				}
				copy {
					from "$rootDir/docker-template"
					into outDir
					filter { line -> line.replace("COPY@SBK", buffer) }
					rename 'docker-template', outFile
				}
			}
		}
	}

	graal {
		def className = sbkClass.capitalize();
		mainClass SbkMainClass
		outputName sbkProjectName
		javaVersion '11'
		graalVersion '21.0.0'
		option "-Dsbk.applicationName=$applicationName -Dsbk.className=$sbkClass"
		option "--initialize-at-build-time=io.sbk.$className"
		option "-H:+AllowIncompleteClasspath"
		option "-H:ResourceConfigurationFiles=$rootDir/resource-config.json"
		option "-H:ReflectionConfigurationFiles=$rootDir/reflection-config.json"
		option "--no-fallback"
		option "-H:Optimize=3"
	}

}

task printDependencies {
	doLast {
		project.subprojects.findAll().each {
			println "subproject : " + it.name
			it.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def id = artifact.moduleVersion.id
				if (id.group.toString() == rootProject.name) {
					println "\tgroup: ${id.group}, version: ${id.version},  name: ${id.name}"
				}
			}
			println()
		}
		println("Root project : "+rootProject.name)
		configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			def id = artifact.moduleVersion.id
			if (id.group.toString() == rootProject.name) {
				println "\tgroup: ${id.group}, version: ${id.version},  name: ${id.name}"
			}
		}
		println()


	}
}

/* Include your driver below */
dependencies {
	compile project(":sbk-api")
	compile project(":driver-concurrentq")
	compile project(":driver-file")
	compile project(":driver-filestream")
	compile project(":driver-asyncfile")
	compile project(":driver-hdfs")
	compile project(":driver-bookkeeper")
	compile project(":driver-rabbitmq")
	compile project(":driver-rocketmq")
	compile project(":driver-pulsar")
	compile project(":driver-kafka")
	compile project(":driver-pravega")
	compile project(":driver-nats")
	compile project(':driver-natsStream')
	compile project(':driver-artemis')
	compile project(':driver-nsq')
	compile project(':driver-jdbc')
	compile project(':driver-minio')
	compile project(':driver-foundationdb')
	compile project(':driver-fdbrecord')
	compile project(':driver-mongodb')
	compile project(':driver-rocksdb')
	compile project(':driver-ignite')
	compile project(':driver-couchdb')
	compile project(':driver-hive')
	compile project(':driver-null')
	compile project(':driver-sqlite')
	compile project(':driver-mysql')
	compile project(':driver-mariadb')
	compile project(':driver-postgresql')
	compile project(':driver-derby')
	compile project(':driver-mssql')
	compile project(':driver-redpanda')
	compile project(':driver-csv')
	compile project(':driver-redis')
	compile project(':driver-seaweeds3')
	compile project(':driver-cassandra')
	compile project(':driver-db2')
}

//create a single Jar with all dependencies
task buildJar(type: Jar) {
	manifest {
		attributes	'Implementation-Title': rootProject.name,
					'Implementation-Version': sbkVersion,
					'Main-Class': SbkMainClass
	}
	zip64 true
	baseName = rootProject.name
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	with jar
}


task SbkServer(type: CreateStartScripts) {
	mainClassName = 'io.sbk.main.SbkServer'
	applicationName = 'sbkserver'
	outputDir = startScripts.outputDir
	classpath = startScripts.classpath
}

applicationDistribution.into("bin") {
	duplicatesStrategy= DuplicatesStrategy.EXCLUDE
	from(SbkServer)
	fileMode = 0755
}