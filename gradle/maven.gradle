/**
 * Copyright (c) KMG. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 */

plugins.withId('maven-publish') {
    def localRepoDir = "sbk-repo"
    def buildRepoDir = "build" + File.separator + localRepoDir
    group = sbkGroup
    setVersion(sbkVersion)

    java {
        withJavadocJar()
        withSourcesJar()
    }

    /*
      Use command : ./gradlew publish  -Pmaven -Pgithub
      -Pmaven - parameter to publish in maven central
      -Pgithub - parameter to publish to Git hub
     */
    publishing {
        repositories {
            if (project.gradle.startParameter.taskNames.contains("publish")) {
                if (project.hasProperty("maven")) {
                    println "Publishing SBK packages to Maven Central"
                    maven {
                        name = "SBK-Maven"
                      //  url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                        url = uri("https://central.sonatype.com/ap1/v1/publisher/upload")
                        credentials {
                            username = project.findProperty("oss.username") ?: System.getenv("OSS_USERNAME")
                            password = project.findProperty("oss.password") ?: System.getenv("OSS_PASSWORD")
                        }
                    }
                } else if (project.hasProperty("github")) {
                    println "Publishing SBK packages to Git Hub"
                    maven {
                        name = "SBK-GitHub"
                        url = uri("https://maven.pkg.github.com/kmgowda/SBK")
                        credentials {
                            username = project.findProperty("github.username") ?: System.getenv("GITHUB_USERNAME")
                            password = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
                        }
                    }
                } else {
                    def stagingDir = project.getProjectDir().toString() + File.separator + buildRepoDir
                    println "Publishing SBK packages to local Maven repository $stagingDir"
                    maven {
                        url = layout.buildDirectory.dir(localRepoDir)
                    }
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                from(components.java)

                pom {
                    groupId = group
                    name = "SBK"
                    url = "https://github.com/kmgowda/sbk"
                    description = "Storage Benchmark Kit"
                    scm {
                        url = 'https://github.com/kmgowda/sbk/tree/master'
                        connection = 'scm:git:git://github.com/kmgowda/sbk.git'
                        developerConnection = 'scm:git:https://github.com/kmgowda/sbk.git'
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'kmgowda'
                            name = 'Keshava Munegowda'
                            email = 'keshava.gowda@gmail.com'
                        }
                    }
                }
            }
        }

        if (!project.property("signing.keyId")) {
            project.setProperty("signing.keyId", System.getenv("SIGNING_KEYID"))
        }

        if (!project.property("signing.password")) {
            project.setProperty("signing.password", System.getenv("SIGNING_PASSWORD"))
        }

        if (!project.property("signing.secretKeyRingFile")) {
            def secretKeyPath = project.file("${System.getProperty("user.home")}/.gnupg/secring.gpg").absolutePath
            project.setProperty("signing.secretKeyRingFile", secretKeyPath)
        }

        if (project.property("signing.keyId") && project.property("signing.password") && project.property("signing.secretKeyRingFile")) {
            signing {
                sign publications.mavenJava
            }
        }
    }



    jreleaser {
        environment {
            // Location of a properties file with key/value pairs
            // Each key must be prefixed with `JRELEASER_` and match
            // the environment variable it overrides.
            //
            variables = '/Users/kmg/.jreleaser/config.toml'
        }

        /*
        release {
            github {
                enabled = true
                skipRelease = true
                skipTag = true
                // overwrite = true
            }
        }

        upload {
            active = 'ALWAYS'
            enabled = true
        }
        */

        signing {
            active = 'ALWAYS'
            armored = true
        }

        deploy {
            maven {
                mavenCentral {
                    sonatype {
                        active = 'ALWAYS'
                        url = 'https://central.sonatype.com/api/v1/publisher'
                        stagingRepository(layout.buildDirectory.dir(localRepoDir).get().toString())
                        setAuthorization("Basic")
                        sign = true
                        checksums = true
                        sourceJar = true
                        javadocJar = true
                        applyMavenCentralRules = true
                    }
                }
            }
        }
    }

}


/*
perform the following command to publish the sbk packages via jreleaser

Once all configuration is in place you may execute the following commands:

1) Verify release & deploy configuration
$ ./gradlew jreleaserConfig

2) Ensure a clean deployment
$ ./gradlew clean

3) Stage all artifacts to a local directory
$ ./gradlew publish

4) Deploy and release    // This dopes full release
$ ./gradlew jreleaserFullRelease

or

$ ./gradlew jreleaserdeploy   // This also does full release
*/